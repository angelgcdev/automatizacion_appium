-> Comando para ver el appPackage y el aaActivity del la aplicacion a abrir:
	->opcion1: adb shell dumpsys window windows | findstr "mCurrentFocus"
	->opcion2: adb shell dumpsys window | findstr "mCurrentFocus"


  
  //*********************************************************

  Para correr appium desde terminal o Appium Server IU
  Appium terminal: path: "/",
  Appium Server UI: path: "/wd/hub",


  //*********************************************************
  -> app SHIZUKU en el dispositivo movil para dar privilegios como el WRITE_SECURE_SETTINGS
    con esta aplicacion movil se le esta dando permisos de root sin tener que rootear el 
    dispositivo
  ->ejecutar el comando en cmd: 
  C:\Users\USUARIO>adb shell sh /sdcard/Android/data/moe.shizuku.privileged.api/start.sh
  
Para android 7 y 6 solamente habilitar en opciones de desarrollador la --> Depuracion USB

Para android 14 habilitar en opciones de desarrollador las siguentes opciones:
  -> Depuracion USB
  -> Instalar via USB
  -> Depuracion USB(Ajustes de seguridad)

//*******************************************************


//-----------------------------------------------------------------------------
Codigo de prueba con un dispositivo :

const wdio = require("webdriverio");

const caps = {
  platformName: "Android",
  "appium:udid": "3201285bf219844a", // ID del dispositivo
  "appium:automationName": "UiAutomator2",
  "appium:noReset": true,
  "appium:newCommandTimeout": 300, // Espera 5 minutos antes de cerrar por inactividad
};

async function testAppium() {
  let driver;

  try {
    driver = await wdio.remote({
      hostname: "127.0.0.1",
      port: 4723,
      path: "/",
      capabilities: caps,
    });

    console.log("‚úÖ Conexi√≥n exitosa con el dispositivo y Appium.");
    const deviceName = await driver.capabilities.deviceName;
    console.log("üì± Dispositivo conectado:", deviceName);

    // üèóÔ∏è Aqu√≠ puedes agregar interacciones con la app

    const screenSize = await driver.getWindowRect();
    console.log("SCREEN SIZE:", screenSize); // { width: 1080, height: 1920, x: 0, y: 0 }
  } catch (error) {
    console.error("‚ùå Error al conectar con Appium:", error);
  } finally {
    if (driver) {
      try {
        await driver.deleteSession();
        console.log("üîÑ Sesi√≥n cerrada correctamente.");
      } catch (error) {
        console.error("‚ö†Ô∏è Error al cerrar la sesi√≥n:", error);
      }
    }
  }
}

testAppium();

//*****************************************************
Codigo de prueba para dos 0 mas dispositivos:

const wdio = require("webdriverio");

// üîπ Lista de dispositivos a probar
const dispositivos = ["3201285bf219844a", "ffbc3fc2"];

// üîπ Funci√≥n para probar un dispositivo espec√≠fico
async function probarDispositivo(udid) {
  // Configuraci√≥n de Appium
  const capacidades = {
    platformName: "Android",
    "appium:udid": udid, // Se conecta al dispositivo espec√≠fico
    "appium:automationName": "UiAutomator2",
    "appium:noReset": true,
    "appium:newCommandTimeout": 300,
  };

  let driver;

  try {
    console.log(`üöÄ Conectando al dispositivo: ${udid}`);

    // Conexi√≥n con Appium
    driver = await wdio.remote({
      hostname: "127.0.0.1",
      port: 4723,
      path: "/",
      capabilities: capacidades,
    });

    console.log("‚úÖ Conexi√≥n exitosa con el dispositivo.");

    // Obtener y mostrar informaci√≥n del dispositivo
    const nombreDispositivo = await driver.capabilities.deviceName;
    console.log(`üì± Dispositivo conectado: ${nombreDispositivo}`);

    const tama√±oPantalla = await driver.getWindowRect();
    console.log(`üìè Tama√±o de pantalla:`, tama√±oPantalla);
  } catch (error) {
    console.error(`‚ùå Error al conectar con el dispositivo ${udid}:`, error);
  } finally {
    if (driver) {
      try {
        await driver.deleteSession();
        console.log(`üîÑ Sesi√≥n cerrada para el dispositivo ${udid}`);
      } catch (error) {
        console.error(
          `‚ö†Ô∏è Error al cerrar la sesi√≥n para el dispositivo ${udid}:`,
          error
        );
      }
    }
  }
}

// üîπ Ejecutar pruebas en los dispositivos uno por uno
async function ejecutarPruebas() {
  for (const udid of dispositivos) {
    await probarDispositivo(udid);
  }
}

// üî• Iniciar pruebas
ejecutarPruebas();
